rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User wallets - users can only access their own wallet
    match /user_wallets/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Transactions - users can only read their own transactions
    match /transactions/{transactionId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    // Purchases - users can only access their own purchases
    match /purchases/{purchaseId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // User inventory - users can only access their own inventory
    match /user_inventory/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User missions - users can only access their own missions
    match /user_missions/{missionId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // User achievements - users can only access their own achievements
    match /user_achievements/{achievementId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Cards - all authenticated users can read cards
    match /cards/{cardId} {
      allow read: if request.auth != null;
      // Only admins can write cards
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Games - users can read/write games they're participating in
    match /games/{gameId} {
      allow read, write: if request.auth != null && 
        (resource.data.player1 == request.auth.uid || 
         resource.data.player2 == request.auth.uid ||
         request.resource.data.player1 == request.auth.uid || 
         request.resource.data.player2 == request.auth.uid);
    }
    
    // Store configuration - read-only for all authenticated users
    match /store_config/{configId} {
      allow read: if request.auth != null;
      // Only admins can write store config
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Admin-only collections
    match /admin_logs/{logId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Test connection (for integration tests)
    match /test_connection/{testId} {
      allow read, write: if request.auth != null;
    }
    
    // Default deny rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
